bool return values indicate I didn't think they would have a return value other than some success/failure indicator. I tried to list them in logical order of execution, 

Task/Function 1
---------------
void  SetFlags (int argc, char* argv[], settings_type* settings);
bool  RemoveComments (FILE* infile, File* coomentFreeFile);

Task/Function 3
---------------
bool  DisplayTextFile (FILE* infile);
(same function can be reused on file without comments)

Task/Function 2
---------------
aToken_type GetNextToken(FILE* commentFreeFile);
void  DisplayLexicalError(int errorCode);   <only run if an error encountered>

Task/Function 4
---------------
main
prototypes
includes

Task/Function 5 - if we use a hash table (if not, something comparable for alternate structure)
----------------
bool  InsertToken (HashTable* h, Token t);
bool  LookupToken (HashTable* h, Token t);
bool  DisplayAllTokens (HashTable* h);


---- some possible structures ----

// an actual token... token_type is an enum provided in tokens.h (which I'm sure we can rename)
typedef struct
{
    char* value;
    token_type t;

} aToken_type;

// if you want to store all the "settings" in one structure... 
// otherwise, just consider it a list of (potential) vars/pointers we'll need
typedef struct
{
    bool displaySourceOnly; // only display source file then exit
    bool displayCleanOnly;  // only display source stripped of comments then exit
    FILE* inputFile;        // PL/0 source file to lex
    FILE* cleanFile;        // for comment-stripped output file
    
} settings_type;

// nodes for linked list
typedef struct
{
    struct node* next;
    struct aToken_type* t;
    int value;
    
} node_type;

// ?
typedef struct
{
    node_type** table;
    node_type* usedList; (used to store, in order, int values of locations in table of each insert (of node w/ token)
    
} hashTable_type;

