Megan Chipman
11/09/2016
NOTE: Please keep in mind this is me experimenting what has already been done!
      If the parser itself seems heavily changed, then please don't worry. It's just me
      trying things out to fix errors, and unable to change them back in this file.
      I keep copies of all of the repository files, and only pushed this one so I 
      don't mess up what we already have. I plan on converting everything in this file to
      be as close as possible to the original, once I debug further.

Changes Made: 
- Added a global array of tokens instead of a global pointer.
          - when I took a look at the original parser.c file I noticed that a pointer was 
            declared without any reference to a structure that will actually hold the tokens
          - pointers are only temporary, and cannot point to more than one thing at a time.
          - turned tok into a non-pointer token_type for testing purposes

- Added the token (the sym type only because I haven't figured out how to properly add the aToken_type
  kind of tokens yet) in the main function.
	- these tokens are added into the proper array index. 
	- when taking a look at do_lex I noticed that it wasn't storing tokens either, but rather
          holding them, displaying them, and releasing them (freeToken) as they came.

- Put function prototype typing as token_type
        - testing purposes only
        - Because tok in this file is not global, it needs to be passed in and returned at 
          each iteration. This is because changes made in functions don't exist outside of 
          the function unless they are global, or unless they are passed back (actually might
          be possible to make tok global now that I think about it). I was personally taught
          that global pointers aren't really a good idea, but that's just me. 

- Changed a few things in Parser (Testing purposes only!)
        - I have checked, and the tokens are now passing into the parser correctly (the 
          commented out printf statement in advance() will show them as they go. 
        - Noticed errors in the error output of the parser once this was done, and am 
          currently experimenting to see what the actual problem is
        - I will not touch the parser in parser.c unless I figure it out, and plan to change
          as little of it as possible.

- Did not use tokens.c when testing, as it worked fine without it.

If there are any questions please let me know!
          

11/10/2016
UPDATES: 
Further modified parser for error checking. 
Corrected a portion of statement that previously did not check for semicolons correctly. Please
note that all other changes are still for experiment purposes only at this time. 

11/11/2016
(continued debugging parser before bed)

11/12/2016
(unable to work on project due to non-flexible plans lasting 8:00am - 8:00pm)

11/13/2016
NOTE: Work done is sufficient enough to be integrated with parser.c
- Added in error code 26 that checks to make sure that the code included in the PM0 array is not
  too long. This was specified by the professor. 
- Further debugged the parser to ensure that it works for test cases that do not include
  complex nested code input. In order to trace and find errors I used paper and followed the
  recursive parser code by hand. Referred to notes given by the professor in both lecture
  slides and document details. 
- Added function for adding to symbol table (needs debugging for the part of the table that
  takes in the name; this portion was therefore commented out so I could focus on more important
  assignment specifications. NOTE: we are not being graded on symbol table input/output. See 
  Assignment Details Document)
- Added the emit function as specified in class notes. This function does not need debugging.
- Added two more global arrays, one that stores the symbol table content, and the other that 
  stores PM0 code. Additionally added cx, a global counter to the PM0 array.
- Added vm.h that includes the structures holding the PM0 code types. (NOTE: vm.c does not 
  need to be integrated into the project, rather we need to run the resulting PM0 code through
  vm.c and send a file (x5 I believe) containing the stack output.  
- Added the proper PM0 codes to the parser in order for the opcode, lexicographical level, and
  modification to be stored in code array (NOTE: code array and method of adding PM0 to it
  were done as specified by the professor, not all PM0 codes were added and debugged 
  due to health concerns)
- NOTE: The entirety of alternative folder has been tested on codeblocks and compiles and 
  runs without warnings or errors.  