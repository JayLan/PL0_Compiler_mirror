20 points total
4 problems/5pts each

P1 ----------
  general questions about sys software (lecture 0 slides)
  general knowledge about PM/0 machine
  static link, dynamic link, registers of PM/0 machine, stack pointer, base pointer, activation record
P2 ----------
  basic lexical analysis
  ex: given list of token types and simple program, identify tokens & types/values (if applicable)
  ex: identify lexicographical errors: illegal token, identsym too long, identsym starts with number
P3 ----------
  context-free grammars
  why are CFL used for parsing, Reg used for lexing?
  Regular exp: concatenation, alternation (|), Kleene closure (*, +)
  CFL/CFG provides the *recursion* needed for parsing
    ex: a^nb^n grammar
  definition of ambiguous grammar - two+ distinct parse tress for some sentence
    ex: E -> E + E | id
    ex: E -> T + E | T ; T -> id //ambiguous?
P4 ----------
  LL(1) grammar for arithmetic expressions
  ex:
  E -> t E'
  E' -> T E' | epsilon
  T -> F T'
  T' -> * F T' | epsilon
  F -> ( E ) | id
  write the above grammar in extended backus-nauer form (EBNF)
  E -> T { + T}
  T -> F { * F }
  F -> ( E ) | id
  {} - repeat an arbitrary number of times
  [] - optional: repeat 0 or 1 times



